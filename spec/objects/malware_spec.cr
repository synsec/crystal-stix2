require "../spec_helper"

describe STIX2::Malware do
  obj = STIX2::Malware.new({
    malware_types: ["ransomware"],
    is_family:     true,
  })

  obj = STIX2::Malware.new(["ransomware"], true)

  Spec.before_each do
    obj = STIX2::Malware.new({
      malware_types: ["ransomware"],
      is_family:     true,
    })
  end

  describe "Required Common Properties" do
    it "Should have correct created and modified" do
      obj.created.should_not be_nil
      obj.created.should_not be_empty

      obj.modified.should_not be_nil
      obj.modified.should_not be_empty
    end

    it "Should have correct spec_version" do
      obj.spec_version.should eq "2.1"
    end

    it "Should have correct id" do
      obj.id.should match(/^malware--/)
    end

    it "Should have correct object_type" do
      obj.object_type.should eq "malware"
    end
  end

  describe "Optional Common Properties" do
    describe "#created_by_ref" do
      it "Should be modifiable" do
        str = "identity--f431f809-377b-45e0-aa1c-6a4751cae5ff"

        obj.created_by_ref = str
        obj.created_by_ref.should be str
      end
    end

    describe "#revoked" do
      it "Should be modifiable" do
        res = false

        obj.revoked = res
        obj.revoked.should eq res
      end
    end

    describe "#labels" do
      res = "iot"

      it "Should be empty right after object creation" do
        obj.labels.should eq [] of String
      end

      it "Should be possible to append an element" do
        obj.labels << res
        obj.labels.should eq [res]
      end

      it "Should be possible to append an array of elements" do
        obj.labels << res
        obj.labels.should eq [res]
      end
    end

    describe "#confidence" do
      it "Should be modifiable" do
        res = 90

        obj.confidence = res
        obj.confidence.should eq res
      end
    end

    describe "#lang" do
      it "Should be modifiable" do
        res = "en"

        obj.lang = res
        obj.lang.should eq res
      end
    end

    describe "#external_references" do
      res = STIX2::ExternalReference.new("http://example.com")

      it "Should be empty right after object creation" do
        obj.external_references.should eq [] of STIX2::ExternalReference
      end

      it "Should be possible to append an element" do
        obj.external_references << res
        obj.external_references.should eq [res]
      end

      it "Should be possible to append an array of elements" do
        obj.external_references << [res]
        obj.external_references.should eq [res]
      end
    end

    describe "#object_marking_refs" do
      res = "marking-definition--089a6ecb-cc15-43cc-9494-767639779123"

      it "Should be empty right after object creation" do
        obj.object_marking_refs.should eq [] of String
      end

      it "Should be possible to append an element" do
        obj.object_marking_refs << res
        obj.object_marking_refs.should eq [res]
      end

      it "Should be possible to append an array of elements" do
        obj.object_marking_refs << [res]
        obj.object_marking_refs.should eq [res]
      end
    end

    describe "#granular_markings" do
      res = STIX2::GranularMarking.new(["description", "labels"])

      it "Should be empty right after object creation" do
        obj.granular_markings.should eq [] of STIX2::GranularMarking
      end

      it "Should be possible to append an element" do
        obj.granular_markings << res
        obj.granular_markings.should eq [res]
      end

      it "Should be possible to append an array of elements" do
        obj.granular_markings << [res]
        obj.granular_markings.should eq [res]
      end
    end

    describe "Malware Specific Properties" do
      describe "#name" do
        it "Should be modifiable" do
          res = "Mirai"

          obj.name = res
          obj.name.should eq res
        end
      end

      describe "#description" do
        it "Should be modifiable" do
          res = "malware that turns networked devices running Linux into remotely controlled bots that can be used as part of a botnet in large-scale network attacks."

          obj.description = res
          obj.description.should eq res
        end
      end

      describe "#malware_types" do
        res = "worm"
        init_val = "ransomware"

        it "Should be empty right after object creation" do
          obj.malware_types.should eq [init_val]
        end

        it "Should be possible to append an element" do
          obj.malware_types << res
          obj.malware_types.should eq [init_val, res]
        end

        it "Should be possible to append an array of elements" do
          obj.malware_types << [res]
          obj.malware_types.should eq [init_val, res]
        end
      end

      describe "#pattern" do
        it "Should be modifiable" do
          res = false

          obj.is_family = res
          obj.is_family.should eq res
        end
      end

      describe "#aliases" do
        res = "loligang"

        it "Should be empty right after object creation" do
          obj.aliases.should eq [] of String
        end

        it "Should be possible to append an element" do
          obj.aliases << res
          obj.aliases.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.aliases << [res]
          obj.aliases.should eq [res]
        end
      end

      describe "#kill_chain_phases" do
        res = STIX2::KillChainPhase.new("lockheed-martin-cyber-kill-chain", "reconnaissance")

        it "Should be empty right after object creation" do
          obj.kill_chain_phases.should eq [] of STIX2::KillChainPhase
        end

        it "Should be possible to append an element" do
          obj.kill_chain_phases << res
          obj.kill_chain_phases.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.kill_chain_phases << [res]
          obj.kill_chain_phases.should eq [res]
        end
      end

      describe "#first_seen" do
        it "Should be modifiable" do
          res = "2016-01-01T00:00:00Z"

          obj.first_seen = res
          obj.first_seen.should eq res
        end
      end

      describe "#last_seen" do
        it "Should be modifiable" do
          res = "2016-05-01T00:00:00Z"

          obj.last_seen = res
          obj.last_seen.should eq res
        end
      end

      describe "#os_execution_envs" do
        res = "cpe:2.3:o:microsoft:windows:1.0:*:*:*:*:*:*:*"

        it "Should be empty right after object creation" do
          obj.os_execution_envs.should eq [] of String
        end

        it "Should be possible to append an element" do
          obj.os_execution_envs << res
          obj.os_execution_envs.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.os_execution_envs << [res]
          obj.os_execution_envs.should eq [res]
        end
      end

      describe "#architecture_execution_envs" do
        res = "x86-64"

        it "Should be empty right after object creation" do
          obj.architecture_execution_envs.should eq [] of String
        end

        it "Should be possible to append an element" do
          obj.architecture_execution_envs << res
          obj.architecture_execution_envs.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.architecture_execution_envs << [res]
          obj.architecture_execution_envs.should eq [res]
        end
      end

      describe "#implementation_languages" do
        res = "go"

        it "Should be empty right after object creation" do
          obj.implementation_languages.should eq [] of String
        end

        it "Should be possible to append an element" do
          obj.implementation_languages << res
          obj.implementation_languages.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.implementation_languages << [res]
          obj.implementation_languages.should eq [res]
        end
      end

      describe "#capabilities" do
        res = "commits-fraud"
        it "Should be empty right after object creation" do
          obj.capabilities.should eq [] of String
        end

        it "Should be possible to append an element" do
          obj.capabilities << res
          obj.capabilities.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.capabilities << [res]
          obj.capabilities.should eq [res]
        end
      end

      describe "#sample_refs" do
        res = "artifact--ff26c055-6336-5bc5-b98d-13d6226742dd"

        it "Should be empty right after object creation" do
          obj.sample_refs.should eq [] of String
        end

        it "Should be possible to append an element" do
          obj.sample_refs << res
          obj.sample_refs.should eq [res]
        end

        it "Should be possible to append an array of elements" do
          obj.sample_refs << [res]
          obj.sample_refs.should eq [res]
        end
      end
    end
  end

  describe "#to_json" do
    it "Should succeed" do
      obj.to_json.should_not be_empty
      obj.to_json.should_not be_nil
    end
  end
end
